1、final关键字
   - final修饰的类无法继承
   - final修饰的方法无法被覆盖
   - final修饰的变量只能赋一次值
   - final修饰的引用一旦指向某个对象，则不能再重新指向其他对象，
	  但该引用指向的对象内部的数据是可以修改的
   - final修饰的实例变量必须手动初始化，不能采用系统默认值
   - final修饰的实例变量一般和static联合使用，称为常量
   	public static final double PI = 3.1415926；

2、抽象类和接口以及抽象类和接口的区别

   2.1、抽象类
     - 抽象类怎么定义？在class前添加abstract关键字就行了
     - 抽象类是无法实例化的，无法创建对象的，所以抽象类是用来被子类继承的
     - final和abstract不能联合使用，这两个关键字是对立的
     - 抽象类的子类可以是抽象类，也可以是非抽象类
     - 抽象类虽然无法实例化，但是抽象类有构造方法，这个构造方法是供子类使用的
     - 抽象类中不一定有抽象方法，抽象方法必须出现在抽象类中
     - 抽象方法怎么定义？
     	public abstract void doSome();  //没有方法体
     - 一个非抽象的类，继承抽象类，必须将抽象类中的抽象方法进行覆盖/重写/实现

     【面试题】(判断题)：java语言中凡是没有方法体的方法都是抽象方法？
     		不对
	 Object类中就有很多方法都没有方法体，都是以";"结尾的，但他们
	 都不是抽象方法，例如：
	 	public native int hashCode();
	这个方法底层调用了C++写的动态链接库程序
	前面修饰符列表中没有：abstract。有一个native，表示调用JVM本地程序。

   2.2、接口的基础语法
      - 接口也是一种引用数据类型，编译之后也是一个class字节码文件
      - 接口是完全抽象的（抽象类是半抽象的）
      - 接口怎么定义，语法是什么？
	  [修饰符列表] interface 接口名{  //接口
	       }
	  [修饰符列表] class 类名{  //类
	       }
	  [修饰符列表] abstract class 类名{  //抽象类
	       }
      - 接口支持多继承，一个接口可以继承多个接口
      - 接口中只包含两部分内容，一部份是：常量。一部分是：抽象方法
      - 接口中所有的元素都是public修饰的（都是公开的）
      - 接口中的抽象方法定义时：public abstract修饰符可以省略
      - 接口中的方法都是抽象方法，所以接口中的方法不能有方法体
      - 接口中的常量  public static final 可以省略
      - 一个非抽象的类，实现接口的时候，必须将接口中所有方法加以实现
      - 一个类可以同时实现多个接口
      - extends和implements可以共存，extends在前，implements在后
      - 使用接口，写代码的时候，可以使用多态（父类型引用指向子类型对象）

  2.3、接口在开发中的作用
     注： 接口在开发中的作用类似于多态在开发中的作用
     多态：面向抽象编程，不要面向具体编程。降低程序的耦合度，提高程序的扩展力。
     【总结】面向接口编程，可以降低程序的耦合度，提高程序的扩展力
     	     接口的使用离不开多态机制。（接口+多态才可以达到降低耦合度）

	     接口可以解耦合，解开的是调用者和实现者的耦合。
	     调用者面向接口调用。
	     实现者面向接口编写程序。

  2.4、抽象类和接口的区别【语法上】
      - 抽象类是半抽象的，接口是完全抽象的
      - 抽象类中有构造方法，接口中没有构造方法
      - 类和类之间只能单继承，接口和接口之间支持多继承
      - 一个类可以同时实现多个接口，一个抽象类只能继承一个类(单继承)
      - 接口中只允许出现常量和抽象方法

3、is a \ has a \ like a 之间的关系
   is a：Cat is a Animal -- 表示继承关系
   has a：She has a pen -- 表示关联关系，以属性的形式存在。
   like a:Cooker like a FoodMenu -- 表示实现关系，通常是： 类 实现(implements) 接口 

4、package 和 import
   4.1、package
      - package出现在java源文件的第一行
      - 带有包名怎么编译：
      	  java -d . XXX.java
      - 怎么运行
          java 完整类名（包名.类名）

   4.2、import
      - import什么时候不需要
         java.lang 不需要
	 同包下不需要
	 其他一律需要
      怎么用
      	 import 完整类名
	 import 包名.*
   
   5 访问控制权限
     private     私有         只能在本类中访问
     protected   受保护的     只能在本类、同包、子类下访问
     public      公开的       在任何位置都可以访问
     缺省                     只能在本类以及同包下访问
	private < 缺省  < protected < public 
     
     访问控制权限修饰符可以修饰什么？
     	属性（四个都可以）
	方法（四个都可以）
	类（public 和 缺省 可以用）
	接口（public 和 缺省 可以用）

6、JDK类库的根类：Object
   6.1、这个老祖宗类中的方法我们需要先研究一下，因为这些方法都是子类通用的。
        任何一个类默认继承Object。就算没有直接继承，最终也会间接继承。
   
   6.2、Object类中有哪些常用的方法？
       我们去哪里找这些方法呢？
         - 去源代码当中。（但是这种方法比较麻烦，源代码也比较难）
	 - 去查阅java的类库的帮助文档。

    什么是API？
       应用程序编程接口。
       整个JDK的类库就是一个java的API
       每一个API都会配置一套API帮助文档

    目前为止我们只需要知道这几个方法即可：【见方法演练】
       protected Object clone()    // 负责对象克隆的
       int hashCode()              // 获取对象哈希值的一个方法
       boolean equals(Object obj)  // 判断两个对象是否相等
       String toString()           // 将对象转换成字符串形式
       protected void finalize()   // 垃圾回收器负责调用的方法

   java中基本数据类型使用"=="判断是否相等
   java中所有引用数据类型统一使用equals方法来判断是否相等

   toString()方法
      以后所有类的toString()方法都是需要重写的。
      重写规则，越简单越明了越好
     System.out.println(引用);  这里会自动调用"引用"的toString()方法
     String类是SUN公司写好的，toString方法已经重写了

   equals()方法
      以后【所有类】的equals方法也需要重写，因为Object中的equals方法比较的
      是两个对象的内存地址，我们应该比较内容，所以需要重写

   finalize()方法
       这个方法是protected修饰的，在Object类中这个方法的源代码是？
       protected void finalize() throws Throwable{}

"abc" 字符串也是java对象，属于String类型 
数组的拷贝方法：System.arraycopy()  【见com.bjpowernode.javase.array】

数组常见的算法：【见chapter19】
  排序算法：
   - 冒泡排序算法
    public static void sort(int[] array){
        for(int i=array.length-1; i>0; i--){
            for(int j=0; j<i; j++){
                if(array[j+1]<array[j]){
                    int temp=array[j];
                    array[j] = array[j+1];
                    array[j+1] = temp;
                }
            }
        }
    }
   - 选择排序算法
     for(int i=0; i<arr.length-1; i++){
            int min = i;
            for(int j=i+1; j<arr.length; j++){
                if(arr[j] < arr[min]){
                    min = j;
                }
            }
            if(min != i){
                int temp = arr[min];
                arr[min] = arr[i];
                arr[i] = temp;
            }
        }
  查找算法：
   - 二分法查找
   public static int bSearch(int[] arr, int ele) {
        int begin = 0;
        int end = arr.length - 1;
        while (begin <= end) {
            int mid = (begin + end) / 2;
            if (arr[mid] == ele) {
                return mid;
            } else if (arr[mid] < ele) {
                begin = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return -1;
    }

算法实际上在java中不需要精通，因为java中已经封装好了，要排序就调用方法就行
   java中提供了一个数组工具类：先要导入这个工具包
     java.util.Arrays   Arrays是一个工具类。  静态方法直接采用类名就可以了
	以后需要使用就查看帮助文档

com.bjpowernode.javase.string   详细讲述了string类  方法区内存中有字符串常量池

com.bjpowernode.javase.integer  详细讲述了八种包装类型（引用数据类型）

com.bjpowernode.javase.buffer   详细讲述了字符串拼接


【异常 chapter21】

java的异常处理机制
   - 异常在java中以类和对象的形式存在，那么异常的继承结构是怎样的？
     我们可以使用UML图来描述一下继承结构。
     画UML图有很多工具，例如：Rational Rose（收费）、starUML等
      Object
      Object下有Throwable（可抛出的）
      Throwable下有两个分支：Error（不可处理的，直接退出JVM）和Exception（可处理的）
      Exception下有两个分支：
          Exception的直接子类：编译时异常
	       （要求程序员在编写程序阶段必须预先对这些异常进行处理，如果不处理报错，因此得名）
	  RuntimeException：运行时异常
    * 编译时异常和运行时异常，都是发生在运行阶段，编译阶段异常是不会发生的。
      所有异常都是在运行阶段发生的，因为只有程序运行阶段才可以new对象
      因为异常的发生就是new异常对象
    * 编译时异常和运行时异常的区别？
      编译时异常一般发生的概率比较高，运行时异常发生的概率比较低。
    * 编译时异常 = 受检异常 = 受控异常
      运行时异常 = 未受检异常 = 非受控异常

    java语言中对异常的处理包括两种方式：
       - 第一种方法：在方法声明的位置上，使用throws关键字
       - 第二种方法：使用try..catch 语句进行异常捕捉

   
   - 什么是UML？有什么用？
     UML是一种统一建模语言，一种图标式语言（画图的）。
     UML不是只有java中使用，只要是面向对象的编程语言，都有UML
     一般画UML图的都是软件架构师或者说是系统分析师，这些级别的人员使用，软件设计人员使用的
     在UML图中可以描述类和类之间的关系，程序执行的流程、对象的状态等

   - 在java软件开发中，软件分析师/设计负责设计类，java软件开发人员必须能看懂
   异常 chapter21 

【集合】chapter22
   1、集合概述
     * 什么是集合？有什么用？
       数组其实就是一个集合。集合实际上就是一个容器，可以来容纳其他类型的数据。
       集合是一个容器，是一个载体，可以一次容纳多个对象。
       在实际开发中，假设连接数据库，数据库当中有10条记录，那么假设
       把这10条记录查询出来，在java程序中会将10条数据封装成10个java对象，
       然后将10个java对象放到某一个集合当中，将集合传到前端，然后遍历集合，
       将数据一个一个的展现出来。
     
     * 集合不能直接存储基本数据类型，另外集合也不能直接存储java对象，集合
       当中存储的都是java对象的内存地址。（或者说集合中存储的是引用）
        list.add(100);  // 自动装箱
	注意：集合在java中本身是一个容器，是一个对象

     * 在java中每一个不同的集合，底层会对应不同的数据结构。往不同的集合中存储元素，
       等于将数据结构放到不同的数据结构当中。
       new ArrayList(); 创建一个集合，底层是数组
       new LinkList(); 创建一个集合对象，底层是链表
       new TreeSet(); 创建一个集合对象，底层是二叉树

     * 集合在java JDK中哪个包下？
       java.util.*;
         所有集合类和集合接口都在java.util包下

     * 为了掌握集合，最好能将集合的继承结构图背会！！！

     * 在java中集合分为两大类
       - 单个方式存储元素
          这一类集合中超级父接口是：java.util.Collection;
       
       - 以键值对的方式存储元素
          这一类集合中超级父接口是：java.util.Map;
      
     Iterator it = "Collection 对象".iterator();
     it是迭代器对象（用来遍历集合中的元素）

     【总结】（所有实现类）
      * ArrayList：底层是数组
      * LinkedList：底层是双向链表
      * Vector：底层是数组，线程安全的，效率较低，使用较少
      * HashSet：底层是HashMap，放到HashSet集合中的元素等同于放到HashMap集合key部分了
      * TreeSet：底层是TreeMap，放到TreeSet集合中的元素等同于放到TreeMap集合Key部分了
      * HashMap: 底层是哈希表，只不过线程安全的，效率较低，使用较少
      * Properties：是线程安全的，并且Key和Value只能存储字符串String
      * TreeMap: 底层是二叉树，TreeMap集合的key可以按照大小顺序排序


      List集合存储元素的特点：
      	有序可重复
	有序：存进去和取出的顺序相同，每一个元素都有下标
	
      Set集合存储元素的特点：
        无序不可重复
	Set集合中没有下标

      SortedSet集合存储元素特点：
        首先是无序不可重复的，但是SortedSet集合中的元素是可排序的
	可按照大小进行排序

	Map集合的Key，就是一个Set集合
	向Set集合中放数据，实际上放到了Map集合的Key部分

【集合这块最主要掌握什么内容？】
  1、每个集合对象的创建（new）
  2、向集合中添加元素
  3、从集合中取出某个元素
  4、遍历集合
  5、主要的集合类：
  	ArrayList 
	LinkedList 
	HashSet（HashMap的key，存储在HashMap集合key的元素需要同时重写hashCode+equals） 
	TreeSet 
	HashMap 
	Properties 
	TreeMap


【IO流(chapter23)】
  
  1、IO流，什么是IO？
     I：input
     O：output
    通过IO可以完成硬盘文件的读和写
  2、IO流的分类方式：
     有多种方式：
       一种是按照流的方向进行分类：
          以内存作为参照物
	  往内存中去，叫做输入，或者叫做读
	  从内存中出来，叫做输出，或者叫做写

       另一种方式是按照读取数据方式不同进行分类：
          有的流是按照字节的方式读取数据，一次读取1个字节byte，等同于一次读取8个二进制位
	  这种流是万能的，什么类型的文件都可以读取，比如：文本文件、声音文件等
	  	假设文件file.txt 采用字节流的话会这样读的
		  a中国bc
		  第一次读：一个字节 a
		  第二次读：一个字节 中 的一半
		  第三次读：一个字节 中 的另一半

	  有的流是按照字符的方式读取数据的，一次读取一个字符，这种流是为了方便读取普通文本
	  文件而存在的，这种流不能读取：图片、声音、视频等文件。只能读取纯文本文件，连Word文件
	  都无法读取
	  	假设文件file.txt 采用字节流的话会这样读的
		  a中国bc
		  第一次读：一个字节 a
		  第二次读：一个字节 中 

    3、 综上所述：
        输入流 输出流
        字节流 字符流

    4、java中的IO流都已经写好了，我们程序员不需要关心，我们最主要还是掌握在Java中
       已经提供了哪些流，每个流的特点是什么，每个流对象上的常用方法有哪些？
        java中所有的流都是在：java.io.* 下

	java中主要还是研究：
		怎么new流对象
		调用流对象的哪个方法是读，哪个方法是写

    5、java IO流这块有四大家族（都是抽象类）
        
	java.io.InputStream 字节输入流
	java.io.OutputStream 字节输出流

	java.io.Reader  字符输入流
	java.io.Writer  字符输出流

	所有的流都实现了：
	   java.io.Closeable接口，都是可关闭的，都有close()方法
	   流毕竟是一个管道，这个是内存和硬盘之间的通道，用完一定要关闭，
	   不然会耗费很多资源。
	
	所有的输出流都实现了：
	   java.io.Flushable接口，都是可刷新的，都有flush()方法
	   养成一个好习惯，输出流在最终输出之后，一定要记得flush()
	   刷新一下。这个刷新表示将通道当中的剩余未输出的数据强行输出完（清空管道）
	   刷新的作用就是清空管道

	注意：在java中只要"类名"以Stream结尾的都是字节流，以Writer/Reader结尾的都是字符流

    6、java.io包下需要掌握的流有16个
      
     文件专属：
       java.io.FileInputStream
       java.io.FileOutputStream
       java.io.FileWriter
       java.io.FileReader
     
     转换流：（将字节流转换为字符流）
       java.io.InputStreamReader
       java.io.OutputStreamWriter
    
     缓冲流专属：
       java.io.BufferedReader
       java.io.BufferedWriter
       java.io.BufferedInputStream
       java.io.BufferedOutputStream
     
     数据流专属：
       java.io.DataInputStream
       java.io.DataOutputStream

     标准输出流：
       java.io.PrintWriter
       java.io.PrintStream
     
     对象专属流：
       java.io.ObjectInputStream
       java.io.ObjectOutputStream


    7、java.io.File类。
       需要掌握：File类中的常用方法

    IO + Properties联合使用
      IO流：文件的读和写
      Properties:是一个Map集合，key和value都是String类型

【多线程(chapter24)】
 
 1、什么是进程？什么是线程？
    进程是一个应用程序
    线程是一个进程中的执行场景/执行单元
    一个进程可以启动多个线程
 2、对于java程序来说，当在DOS命令窗口中输入：
    java HelloWord 回车之后
    会先启动JVM，而JVM就是一个进程
    JVM再启动一个主线程调用main方法
    同时再启动一个垃圾回收线程负责看护，回收垃圾
    
   【注意】：进程A和进程B内存独立不共享。（资源不贡献）
	     线程A和线程B：
	       在Java语言中：
	         线程A和线程B，堆内存和方法区内存共享
		 但是栈内存独立，一个线程一个栈

 3、分析一个问题：对于单核的CPU来说，真的可以做到真正的多线程并发吗？
      什么是真正的多线程并发？
      t1线程执行t1的
      t2线程执行t2的
      t1不会影响t2，t2也不会影响t1，这叫做真正的多线程并发。

    单核的CPU表示只有一个大脑：
      不能够做到真正的多线程并发
 
 4、java语言中，实现线程有两种方法：
    第一种：编写一个类，直接继承java.lang.Thread,重写run方法
    第二种：编写一个类，实现java.lang.Runnable接口，实现run方法

    注意：第二种方式实现接口比较常用，因为一个类实现了接口，它还可以去继承
          其他的类，更灵活。 

    实现线程的第三种方式：实现Callable接口（JDK8新特性）
    这种方式实现的线程可以获取线程的返回值
    之前讲解的那两种方式是无法获取线程返回值的，因为run方法返回值为void

    思考：
    	系统委派一个线程去执行一个任务，该线程执行完任务后，可能会有一个执行结果，
	我们怎么拿到这个结果，使用第三种方式：
		实现Callable接口方式。

 5、关于线程对象的生命周期？
    新建状态
    就绪状态
    运行状态
    阻塞状态
    死亡状态
 
 6、java采用的是抢占式调度模型

 7、关于多线程并发环境下，数据的安全问题

   * 为什么这个是重点？
     以后开发中，我们的项目都是运行在服务器中，而服务器已经将线程的定义、线程的对象创建、线程
     的启动等都已经实现了。这些代码我们都不需要编写
     最重要的是：你所编写的程序放到多线程环境下是否是安全的【重点】

   * 什么时候数据在多线程并发的环境下会存在安全问题？
     三个条件：
        多线程并发、有共享数据、共享数据有修改的行为
   
   * 怎么解决线程安全问题呢？
     线程排队执行。（不能并发）
     这种机制被称为：线程同步机制
   
   * 说到线程同步这块，涉及到两个专业术语：
     - 异步编程模型：
     	线程t1和t2各自执行各自的
	其实就是多线程并发
     - 同步编程模型：
     	线程t1和t2在一些关键点需要互相等待，效率较低，排队执行。

 8、java中有三大变量：【重要】
    实例变量：在堆中  ---> 成员变量
    静态变量：在方法区中 ---> 成员变量
    局部变量：在栈中
   以上三大变量中：
     局部变量永远都不会存在线程安全问题
     因为局部变量不共享（一个线程一个栈）
 
 9、如果使用局部变量的话：
    建议使用：StringBuilder
    因为局部变量不存在线程安全问题，选择StringBuilder
    StringBuffer效率较低

    ArrayList是非线程安全的
    Vector是线程安全的
    HashMap HashSet是非线程安全的
    Hashtable是线程安全的
 
 10、总结：
    synchronized有三种写法：
    	第一种：同步代码块
		灵活
		synchronized(线程共享对象){
			同步代码块；
		   }
	第二种：在实例方法上使用synchronized
		表示共享对象一定是this
		并且同步代码块是整个方法体
	第三种：在静态方法上使用synchronized
		表示栈类锁
		类锁永远只有1把
		计算创建了100个对象，类锁也只有1把

 11、聊一聊，我们以后在开发中应该怎么解决线程安全问题？
 	synchronized会让程序的执行效率降低，用户体验不好。
	系统的用户吞吐量降低。用户体验差。
    第一种方案：尽量使用局部变量代替"实例变量和静态变量"。
    第二种方案：如果必须是实例变量，那么可以考虑创建多个对象，这样实例变量的内存就不共享了。
    第三中方案：使用synchronized，线程同步机制
  
 12、守护线程
     Java语言中线程分为两大类：
     	一类是：用户线程
	一类是：守护线程（后台线程）
	       其中具有代表性的就是：垃圾回收线程
	守护线程的特点：
	    一般守护线程是一个死循环，所有用户线程只要结束，守护线程自动结束
	注意：主线程main方法是一个用户线程。
 
 13、定时器
     定时器的作用：间隔特定的时间，执行特定的程序。

     在实际的开发中，每隔多久执行一段特定的程序，这种需求是很常见的。
     那么java中其实可以采用多种方式实现：
     	- 可以采用sleep方法（最原始的定时器）
	- 在java的类库中已经写好了一个定时器：java.util.Timer 可以直接拿来用
	  不过，这种方式在目前的开发中也很少用，因为现在有很多高级框架都是支持
	  定时任务的。

	  在实际开发中，目前使用较多的是Spring框架中提供的SpringTask框架，
	  这个框架只要进行简单的配置，就可以完成定时器任务。

 14、关于Object类中的wait和notify方法（生产者和消费者模式）
   - wait和notify方法不是线程对象的方法，是java中任何一个java对象都有的方法，
     因为这两个方法是Object类中自带的
    
   - wait()方法作用？
     Object o = new Object();
     o.wait();
     表示：让正在o对象上活动的线程进入等待状态，无期限等待，直到被唤醒为止。

   - notify()方法作用？
      Object o = new Object();
      o.notify();
      表示：唤醒正在o对象上等待的线程

      还有一个notifyAll()方法：
         这个方法是唤醒o对象处于等待的所有线程


【反射机制(chapter25)】

1、反射机制有什么用？
   通过java语言中的反射机制可以操作字节码文件
   有点类似于黑客。（可以读和修改字节码文件）
   通过反射机制可以操作代码片段。（class文件）
  
2、反射机制的相关类在哪个包下？
   java.lang.reflect.*;

3、反射机制相关的重要的类有哪些？
   java.lang.class: 代表字节码文件 ---> 整个类
   java.lang.reflect.Method: 代表字节码中的方法字节码 ---> 类中的方法
   java.lang.reflect.Constructor: 代表字节码中的构造方法字节码 ---> 类中的构造方法
   java.lang.reflect.Field: 代表字节码中的属性字节码 ---> 类中的成员变量

4、关于JDK中自带的类加载器：
   * 什么是类加载器？
     专门负责加载类的命令/工具
     ClassLoader

   * JDK中自带了3个类加载器
   	启动类加载器
	扩展类加载器
	应用类加载器

【注解】chapter26

1、注解，或者叫做注释类型，英文单词是：Annotation
2、注解Annotation是一种引用数据类型。编译之后也是生成xxx.class文件
3、怎么自定义注解呢？语法格式？
    [修饰符列表] @interface 注解类型名{

    }
4、注解怎么使用，用在什么地方？
	
   * 注解使用时的语法格式是：
   	@注解类型名
   * 注解可以出现在类上、属性上、方法上、变量上等...
     注解还可以出现在注解类型上
5、JDK内置了哪些注解呢?
   java.lang包下的注释类型
      Oeprecated 用 @Oeprecated 注释的程序元素，
      不鼓励程序员使用这样的元素，通常是因为他很危险或存在更好的选择 （掌握）
    
      Override 表示一个方法声明打算重写超类中的另一个方法声明 （掌握）

      SuppressWarnings 指示应该在注释元素（以及包含在该注释元素中的
      所有程序元素）中取消显示指定的编译器警告。  
6、元注解
   什么是元注解？
      用来标注 “注解类型” 的注解 称为元注解
   常见的元注解：
      Target ：  用来标注“被标注的注解”可以出现在哪些位置上
      Retention ： 用来标注“被标注的注解”最终可以保存在哪里
         @Retention（RetentionPolicy.SOURCE): 表示该注解只被保留在java源文件中
	 @Retention（RetentionPolicy.CLASS): 表示该注解只被保留在class文件中
	 @Retention（RetentionPolicy.RUNTIME): 表示该注解只被保留在class文件中，并且可以被反射机制读取到 

7、注解在开发中有什么用呢？
   需求：
   	假设有这样一个注解，叫做：@ID
	这个注解只能出现在类上面，当这个类上有这个注解的时候，
	要求这个类中必须有一个int类型的id属性。如果没有这个属性
	就报异常。如果有这个属性则正常执行！（annotation7）


【网络编程】chapter27

  1、InetAddress的使用
     为了方便我们对IP地址的获取和操作，Java提供了一个类InetAddress供我们使用
     InetAddress ： 此类表示Internet协议地址

  2、UDP通信程序
     * UDP通信原理：
       UDP协议是一种不可靠的网络协议，它在通信的两端各建立一个Socket对象，但是这两个Socket只是发送，
       接收数据的对象，因此对于基于UDP协议的通信双方而言，没有所谓的客户端和服务器的概念。
       java提供了DatagramSocket类作为基于UDP协议的Socket

       UDP发送数据的步骤：
       - 创建发送端的Socket对象（DatagramSocket）
       - 创建数据，并把数据打包
       - 调用DatagramSocket对象的方法发送数据
       - 关闭发送端

       UDP接收数据的步骤：
       - 创建发送端的Socket对象（DatagramSocket）
       - 创建一个数据包，用于接收数据
       - 调用DatagramSocket对象的方法接收数据
       - 解析数据包，并把数据在控制台显示
       - 关闭接收端

  3、TCP通信程序
     * TCP通信协议是一种可靠的网络协议，它在通信两端各建立一个Socket对象，从而在通信的两端形成网络虚拟电洛
       一旦建立了虚拟的网络链路，两端的程序就可以通过虚拟链路进行通信。
     * Java对基于TCP协议的网络提供了良好的封装，使用Socket对象来代表两端的通信端口，并通过Socket产生IO流
       来进行网络通信。
     * Java为客户端提供了Socket类，为服务器端提供了ServerSocket类


     TCP发送数据的步骤：
      - 创建客户端的Socket对象(Socket)
      - 获取输出流，写数据
      - 释放资源

     TCP接收数据的步骤：
      - 创建服务器的Socket对象(ServerSocket)
      - 监听客户端连接，返回一个Socket对象
      	   Socket accept()
      - 获取输入流，读数据，并把数据显示在控制台
      - 释放资源
     
     

	    


     
       

    




          
	


