重点提示：
计算每个员工的年薪？
     select ename,(sal+comm)*12 as yearsal from emp; // 错误
     【重点】 所有的数据库都是这样规定的，只要有NULL参与运算，结果一定为NULL。
      使用ifnull函数
     select ename,(sal+ifnull(comm,0))*12 as yearsal from emp;

分组函数自动忽略NULL。
     select count(comm) from emp;
     select sum(comm) from emp;  // 一定要注意 不用 where comm is not null;

【重点】 当一条语句中有group by的话，select后面只能跟分组函数和参与分组的字段。

怎么删除大表？(重点)
     turncate table emp1; // 表被截断，不可回滚。永久丢失

数据库
  MySQL端口3306
  每个软件启动都有一个服务的概念

1、如何删除MySQL
   1.1 双击安装包，点击下一步，然后点击remove。卸载
   1.2 手动删除Program Files中的MySQL目录
   1.3 手动删除ProgramData目录(这个目录是隐藏的)中的MySQL

MySQL 

1、sql、DB、DBMS分别是什么，他们之间的关系？
   DB：DataBase(数据库，数据库实际上在硬盘上以文件的形式存在)
   DBMS：DataBase Managment System(数据库管理系统，常见的有：MySQL Oracle DB2 Sybase SqlServer...)
   SQL: 结构化查询语言，是一门标准通用的语言。标准的sql适合于所有的数据库产品
        SQL属于高级语言。SQL语句在执行的时候，实际上内部也会先进行编译，然后再执行sql(sql语句的编译由
	DBMS完成)

2、什么是表？
   表 table
   一个表包括行和列：
   行：被称为数据/记录（data）
   列：被称为字段（column）
   每一个字段应该包括哪些属性？
   	字段名、数据类型、相关的约束

3、学习MySQL主要是学习通用的SQL语句，那么SQL语句包括增删改查，SQL语句该怎么分类呢？
   DQL(数据查询语言) ： 查询语句，凡是select语句都是DQL
   DML(数据操作语言) ： insert delete update 对表当中的数据进行增删改
   DDL(数据定义语言) ： create drop alter 对表结构的增删改
   TCL(事务控制语言) ： commit提交事务 rollback回滚事务
   DCL(事务控制语言) ： grant授权 revoke撤销权限等

4、导入数据（后期练习使用）
第一步：登录MySQL数据库管理系统
        mysql -uroot -p333
第二步：查看有哪些数据库
        show databases; (这个不是SQL语句，属于MySQL的命令)
	+--------------------+
	| Database           |
	+--------------------+
	| information_schema |
	| mysql              |
	| performance_schema |
	| test               |
	+--------------------+
第三步：创建属于我们自己的数据库
        create database bjpowernode; (这个不是SQL语句，属于MySQL的命令)
第四步： 使用bjpowernode数据
	use bipowernode; (这个不是SQL语句，属于MySQL的命令)
第五步：查看当前使用的数据库中有哪些表？
	show tables; (这个不是SQL语句，属于MySQL的命令)
第六步：初始化数据
	source C:\Users\leezhang\Documents\MySQL\resources\bjpowernode.sql
	+-----------------------+
	| Tables_in_bjpowernode |
	+-----------------------+
	| dept                  |
	| emp                   |
	| salgrade              |
	+-----------------------+

5、bjpowernode.sql 这个文件以sql结尾，这样的文件被称为"sql脚本"
   什么是sql脚本呢？
   当一个文件的扩展名是.sql,并且该文件中编写了大量的sql语句，我们称这样的文件为sql脚本
   注意：直接使用source命令可以执行sql脚本
   sql脚本中的数据量太大的时候，无法打开，请使用source命令完成初始化

6、删除数据库：drop database bjpowernode;

7、查看表的结构    desc 表名;
	+-----------------------+
	| Tables_in_bjpowernode |
	+-----------------------+
	| dept                  |  （部门表）
	| emp                   |  （员工表）
	| salgrade              |  （工资等级表）
	+-----------------------+

mysql> desc dept;	
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| DEPTNO | int(2)      | NO   | PRI | NULL    |       |   部门编号
| DNAME  | varchar(14) | YES  |     | NULL    |       |   部门名称
| LOC    | varchar(13) | YES  |     | NULL    |       |   部门位置
+--------+-------------+------+-----+---------+-------+
   
mysql> desc emp;
+----------+-------------+------+-----+---------+-------+
| Field    | Type        | Null | Key | Default | Extra |
+----------+-------------+------+-----+---------+-------+
| EMPNO    | int(4)      | NO   | PRI | NULL    |       |  员工编号
| ENAME    | varchar(10) | YES  |     | NULL    |       |  员工姓名
| JOB      | varchar(9)  | YES  |     | NULL    |       |  员工岗位
| MGR      | int(4)      | YES  |     | NULL    |       |  上级领导编号
| HIREDATE | date        | YES  |     | NULL    |       |  入职日期
| SAL      | double(7,2) | YES  |     | NULL    |       |  月薪
| COMM     | double(7,2) | YES  |     | NULL    |       |  补助/津贴
| DEPTNO   | int(2)      | YES  |     | NULL    |       |  部门编号
+----------+-------------+------+-----+---------+-------+

mysql> desc salgrade;
+-------+---------+------+-----+---------+-------+
| Field | Type    | Null | Key | Default | Extra |
+-------+---------+------+-----+---------+-------+
| GRADE | int(11) | YES  |     | NULL    |       |   等级
| LOSAL | int(11) | YES  |     | NULL    |       |   最低薪资
| HISAL | int(11) | YES  |     | NULL    |       |   最高薪资 
+-------+---------+------+-----+---------+-------+

8、表中的数据？

mysql> select * from emp;
+-------+--------+-----------+------+------------+---------+---------+--------+
| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
+-------+--------+-----------+------+------------+---------+---------+--------+
|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |
|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |
|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |
|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |
|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |
|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |
|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |
|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |
|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |
|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |
+-------+--------+-----------+------+------------+---------+---------+--------+

mysql> select * from dept;
+--------+------------+----------+
| DEPTNO | DNAME      | LOC      |
+--------+------------+----------+
|     10 | ACCOUNTING | NEW YORK |
|     20 | RESEARCH   | DALLAS   |
|     30 | SALES      | CHICAGO  |
|     40 | OPERATIONS | BOSTON   |
+--------+------------+----------+

mysql> select * from salgrade;
+-------+-------+-------+
| GRADE | LOSAL | HISAL |
+-------+-------+-------+
|     1 |   700 |  1200 |
|     2 |  1201 |  1400 |
|     3 |  1401 |  2000 |
|     4 |  2001 |  3000 |
|     5 |  3001 |  9999 |
+-------+-------+-------+

9、常用命令

mysql> select database();  查看当前使用的是哪个数据库
+-------------+
| database()  |
+-------------+
| bjpowernode |
+-------------+

mysql> select version();  查看mysql的版本号
+-----------+
| version() |
+-----------+
| 5.5.36    |
+-----------+

\c   结束一条语句
exit  退出mysql

10、查看创建表的语句：
    show create table emp;

11、简单的查询语句(DQL)
   语法格式 
      select 字段名1，字段名2，字段名3，...from 表名;

    提示：
       1、任何一条sql语句以 ";" 结尾
       2、sql语句不区分大小写
    
    查询员工的年薪：(字段可以参与数学运算)
    mysql> select ename,sal * 12 from emp;
	+--------+----------+
	| ename  | sal * 12 |
	+--------+----------+
	| SMITH  |  9600.00 |
	| ALLEN  | 19200.00 |
	| WARD   | 15000.00 |
	| JONES  | 35700.00 |
	| MARTIN | 15000.00 |
	| BLAKE  | 34200.00 |
	| CLARK  | 29400.00 |
	| SCOTT  | 36000.00 |
	| KING   | 60000.00 |
	| TURNER | 18000.00 |
	| ADAMS  | 13200.00 |
	| JAMES  | 11400.00 |
	| FORD   | 36000.00 |
	| MILLER | 15600.00 |
	+--------+----------+
   给查询结果的列重命名：
        select ename,sal * 12 as yearsal from emp; 
	select ename,sal * 12 as '年薪' from emp;  // as关键字可以省略
   注意：标准sql语句中要求字符串使用单引号括起来。
   
 查询所有字段？
    select * from emp; // 实际开发中不建议使用*，效率较低
 

12、条件查询：
    语法格式：
       select
          字段，字段...
       from 
          表名
       where
          条件;
   执行顺序：先from,然后where，最后select

   查询工资等于5000的员工姓名？
      select ename from emp where sal = 5000;
	+-------+
	| ename |
	+-------+
	| KING  |
	+-------+
   查询SMITH的工资？
     select sal from emp where ename = 'smith'; // 字符串需要用单引号括起来

   查询工资高于3000的员工？
     select ename,sal from emp where sal > 3000;

   查询工资不等于于3000的员工？
     select ename,sal from emp where sal != 3000;

   查询工资在1100和3000之间的员工，包括1100和3000？
     select ename,sal from emp where sal between 1100 and 3000; // 闭区间
     select ename,sal from emp where sal >= 1100 and sal <=3000;

   查询哪些人津贴为null？
	在数据库当中，NULL不是一个值，代表什么也没有，为空。
	空不是一个值，不能用等号衡量

	必须使用 is null 或者 is not null
     select ename,comm from emp where comm is null;
     select ename,comm from emp where comm is not null; 

   查询哪些人没有津贴？
     select ename,comm from emp where comm is null or comm = 0 ;

   查询工作岗位是MANAGER和SALESMAN的员工？
     select ename,job from emp where job = 'manager' or job = 'salesman';

   【and和or联合使用】查询薪资大于1000的并且部门编号是20或30部门的员工。 
     select ename,sal,deptno from emp where sal >1000 and (deptno = 20 or deptno = 30);
     注意：当运算符的优先级不确定的时候加小括号。

   【in等同于or】查询工作岗位是MANAGER和SALESMAN的员工？
     select ename,job from emp where job = 'salesman' or job = 'manamger';
     select ename,jab from emp where job in ('salesman','manager'); 
     注意: in后面的值不是区间，是具体的值  
           not in 不在后面的值中

   【模糊查询like】查询名字当中含有o的？
     % 代表任意多个字符
     _ 代表任意一个字符    
     \_ 普通的下划线
       select ename from emp where ename like '%o%';
     查询名字中第二个字母是A的？
        select ename from emp where ename like '_A%';

13、排序（升序、降序）
   
     按照工资升序，找出员工名和薪资？(默认升序，asc表示升序，desc表示降序)
        select ename,sal from emp order by sal;

     按照工资的降序排列，当工资相同的时候再按照名字的升序排列。
        select ename,sal from emp order by sal desc,ename asc;
	注意：越靠前的字段越能起到主导作用。只有当前面的字段无法完成排序的时候，才会启用后面的字段

     找出工作岗位是SALESMAN的员工，并且要求按照薪资的降序排列。
        select ename,job,sal from emp where job = 'salesman' order by sal desc; // 字符串要打单引号
	
	select            3
	    *
	from              1
	    tablename
	where             2
	    条件
	order by          4
	    ...

14、分组函数？
    count 计数
    sum   求和
    avg   平均值
    max   最大值
    min   最小值

    注意：所有的分组函数都是对"某一组"数据进行操作的。

    找出工资总和？
       select sum(sal) from emp;
    找出最高工资？
       select max(sal) from emp;
    找出总人数?
       select count(*) from emp;
       select count(ename) from emp;  

     count(*) 和 count(某个字段)有什么区别？
       count(*) : 不是统计某个字段中数据的个数，而是统计总记录的条数。(和某个字段无关)
       count(某个字段) : 表示统计 "某个字段" 字段中不为NULL的数据总数量

    分组函数一共5个。
    分组函数还有另一个名字：多行处理函数。
    多行处理函数的特点：输入多行，最终处理的结果是1行。

 ***分组函数自动忽略NULL。
       select count(comm) from emp;
       select sum(comm) from emp;  // 一定要注意 不用 where comm is not null;
    
    找出工资高于平均工资的员工？
       select ename,sal from emp where sal > avg(sal);  //ERROR 1111 (HY000): Invalid use of group function
       思考以上的错误信息：无效的使用了分组函数？
         原因：SQL语句中有一个语法规则，分组函数不可直接使用在where子句当中。 WHY？？？
	     解释： 因为group by是where执行之后才会执行的。

	select ename,sal from emp where sal > (select avg(sal) from emp);

	 select    5
	      ..
	 from      1
	      ..
	 where     2
	      ..
	 group by  3
	      ..（分组函数）
	 having    4
	      ..
	 order by  6
	      ..
       


       
15、单行处理函数
   什么单行处理函数？
     输入一行，输出一行。

   计算每个员工的年薪？
     select ename,(sal+comm)*12 as yearsal from emp; // 错误
     【重点】 所有的数据库都是这样规定的，只要有NULL参与运算，结果一定为NULL。
      使用ifnull函数
     select ename,(sal+ifnull(comm,0))*12 as yearsal from emp;
   
   ifnull() 空处理函数？
      ifnull(可能为NULL的数据，被当做什么处理) ：属于单行处理函数

    select ename,ifnull(comm,0) as comm from emp;
   
16、group by 和 having
    group by : 按照某个字段或者某些字段进行分组
    having  ：是对分组之后的数据进行再次过滤

    案例：找出每个工作岗位的最高薪资。
      select max(sal),job from emp group by job;

      select ename,max(sal),job from emp group by job; // Oracle会报错

      【重点】 当一条语句中有group by的话，select后面只能跟分组函数和参与分组的字段。

      注意: 分组函数一般和group by联合使用。
            并且任何一个分组函数(max min avg count sum) 都是在group by语句执行结束之后才会执行的。
	    当一条sql语句没有group by的话，整张表的数据会自成一组。

     查询每个工作岗位的平均薪资？
     select job,avg(sal) from emp group by job;

     多个字段能不能联合起来分组？
     案例：找出每个部门不同工作岗位的最高薪资。
         select deptno,job,max(sal) from emp group by deptno,job;

     找出每个部门的最高工资，要求显示薪资大于2900的数据。
     
     第一步：找出每个部门的最高薪资
     select deptno,max(sal) from emp group by deptno;
     +--------+----------+
     | deptno | max(sal) |
     +--------+----------+
     |     10 |  5000.00 |
     |     20 |  3000.00 |
     |     30 |  2850.00 |
     +--------+----------+
     
     第二步：找出薪资大于2900
     select deptno,max(sal) from emp group by deptno having max(sal) > 2900; // 效率太低
     +--------+----------+
     | deptno | max(sal) |
     +--------+----------+
     |     10 |  5000.00 |
     |     20 |  3000.00 |
     +--------+----------+

     效率高：   select deptno,max(sal) from emp where sal >2900 group by deptno;  // 使用where过滤

     找出每个部门的平均薪资，要求显示薪资大于2000的数据。
     第一步:找出每个部门的平均薪资
     select deptno,avg(sal) from emp group by deptno;
     +--------+-------------+
     | deptno | avg(sal)    |
     +--------+-------------+
     |     10 | 2916.666667 |
     |     20 | 2175.000000 |
     |     30 | 1566.666667 |
     +--------+-------------+
     第二步：要求显示薪资大于2000的数据
     select deptno,avg(sal) from emp group by deptno having avg(sal) > 2000;
     +--------+-------------+
     | deptno | avg(sal)    |     这种情况不能使用where
     +--------+-------------+
     |     10 | 2916.666667 |
     |     20 | 2175.000000 |
     +--------+-------------+
     




1、关于查询结果去重？
mysql> select distinct job from emp;  // distinct 关键字取出重复记录
+-----------+
| job       |
+-----------+
| CLERK     |
| SALESMAN  |
| MANAGER   |
| ANALYST   |
| PRESIDENT |
+-----------+

注意：distinct只能出现在所有字段的最前面

案例：统计岗位的数量？
select count(distinct job) from emp;
+---------------------+
| count(distinct job) |
+---------------------+
|                   5 |
+---------------------+

2、链接查询
(1) 什么是链接查询？
     在实际开发中，大部分的情况下都不是从单表中查询数据，一般都是多张表联合查询取出最终的结果。
   
(2) 连接查询的分类？
    根据表的连接方式来划分，包括：
     内连接：
       	   等值连接
	   非等值连接
	   自连接
     外连接：
           左外连接(左连接)
	   右外连接(右连接)
     全连接(这个不讲，很少用！)

(3) 在表的连接查询方面有一种现象被称为：笛卡尔积现象      
案例：找出每一个员工的部门名称，要求显示员工名和部门名
EMP表
+--------+--------+
| ename  | deptno |
+--------+--------+
| SMITH  |     20 |
| ALLEN  |     30 |
| WARD   |     30 |
| JONES  |     20 |
| MARTIN |     30 |
| BLAKE  |     30 |
| CLARK  |     10 |
| SCOTT  |     20 |
| KING   |     10 |
| TURNER |     30 |
| ADAMS  |     20 |
| JAMES  |     30 |
| FORD   |     20 |
| MILLER |     10 |
+--------+--------+
DEPT表
+--------+------------+----------+
| DEPTNO | DNAME      | LOC      |
+--------+------------+----------+
|     10 | ACCOUNTING | NEW YORK |
|     20 | RESEARCH   | DALLAS   |
|     30 | SALES      | CHICAGO  |
|     40 | OPERATIONS | BOSTON   |
+--------+------------+----------+

select ename,dname from emp,dept;  // 14 * 4 = 56 条记录

笛卡尔积现象:当两张表进行连接查询的时候，没有任何条件进行限制，最终的查询结果条数是两张表记录条数的乘积

关于表的别名：
    select e.ename,d.dname from emp e,dept d;
    表的别名有什么好处？
    第一：执行效率高
    第二：可读性好
   
(4) 怎么避免笛卡尔积现象？
   加条件进行过滤，但是不会减少笛卡尔积的匹配次数

案例：找出每一个员工的部门名称，要求显示员工名和部门名
select e.ename,d.dname from emp e,dept d where e.deptno = d.deptno; // sql92
+--------+------------+
| ename  | dname      |
+--------+------------+
| CLARK  | ACCOUNTING |
| KING   | ACCOUNTING |
| MILLER | ACCOUNTING |
| SMITH  | RESEARCH   |
| JONES  | RESEARCH   |
| SCOTT  | RESEARCH   |
| ADAMS  | RESEARCH   |
| FORD   | RESEARCH   |
| ALLEN  | SALES      |
| WARD   | SALES      |
| MARTIN | SALES      |
| BLAKE  | SALES      |
| TURNER | SALES      |
| JAMES  | SALES      |
+--------+------------+
   
(5) 内连接之等值连接：最大特点是:条件是等量关系

案例：查询每个员工的部门名称，要求显示员工名和部门名
select e.ename,d.dname from emp e,dept d where e.deptno = d.deptno; // sql92 不常用

SQL99：(常用的)
  select 
      e.ename,d.dname
  from
      emp e
  inner join  // inner可以省略
      dept d
  on
     e.deptno = d.deptno;

语法：
    ...
      table A
    join
      table B
    on
      连接条件
    where
      ...
  
  SQL99语法结构更清晰一些：表的连接条件和后来的where条件分离了

(6) 内连接之非等值连接：最大的特点是：连接条件中的关系是非等量关系
案例：找出每个员工的工资等级，要求显示员工名、工资、工资等级。
mysql> select ename,sal from emp;
+--------+---------+
| ename  | sal     |
+--------+---------+
| SMITH  |  800.00 |
| ALLEN  | 1600.00 |
| WARD   | 1250.00 |
| JONES  | 2975.00 |
| MARTIN | 1250.00 |
| BLAKE  | 2850.00 |
| CLARK  | 2450.00 |
| SCOTT  | 3000.00 |
| KING   | 5000.00 |
| TURNER | 1500.00 |
| ADAMS  | 1100.00 |
| JAMES  |  950.00 |
| FORD   | 3000.00 |
| MILLER | 1300.00 |
+--------+---------+

mysql> select * from salgrade;
+-------+-------+-------+
| GRADE | LOSAL | HISAL |
+-------+-------+-------+
|     1 |   700 |  1200 |
|     2 |  1201 |  1400 |
|     3 |  1401 |  2000 |
|     4 |  2001 |  3000 |
|     5 |  3001 |  9999 |
+-------+-------+-------+

select
    e.ename,e.sal,s.grade
from
    emp e
inner join
    salgrade s
on
    e.sal between s.losal and s.hisal;
+--------+---------+-------+
| ename  | sal     | grade |
+--------+---------+-------+
| SMITH  |  800.00 |     1 |
| ALLEN  | 1600.00 |     3 |
| WARD   | 1250.00 |     2 |
| JONES  | 2975.00 |     4 |
| MARTIN | 1250.00 |     2 |
| BLAKE  | 2850.00 |     4 |
| CLARK  | 2450.00 |     4 |
| SCOTT  | 3000.00 |     4 |
| KING   | 5000.00 |     5 |
| TURNER | 1500.00 |     3 |
| ADAMS  | 1100.00 |     1 |
| JAMES  |  950.00 |     1 |
| FORD   | 3000.00 |     4 |
| MILLER | 1300.00 |     2 |
+--------+---------+-------+

(7) 自连接：最大的特点是：一张表看做两张表，自己连自己

案例：找出每个员工的上级领导，要求显示员工名和对应的领导名。
emp a 员工表
mysql> select empno,ename,mgr from emp;
+-------+--------+------+
| empno | ename  | mgr  |
+-------+--------+------+
|  7369 | SMITH  | 7902 |
|  7499 | ALLEN  | 7698 |
|  7521 | WARD   | 7698 |
|  7566 | JONES  | 7839 |
|  7654 | MARTIN | 7698 |
|  7698 | BLAKE  | 7839 |
|  7782 | CLARK  | 7839 |
|  7788 | SCOTT  | 7566 |
|  7839 | KING   | NULL |
|  7844 | TURNER | 7698 |
|  7876 | ADAMS  | 7788 |
|  7900 | JAMES  | 7698 |
|  7902 | FORD   | 7566 |
|  7934 | MILLER | 7782 |
+-------+--------+------+

emp b 领导表
mysql> select empno,ename,mgr from emp;
+-------+--------+
| empno | ename  | 
+-------+--------+
|  7566 | JONES  | 
|  7698 | BLAKE  | 
|  7782 | CLARK  |
|  7788 | SCOTT  | 
|  7839 | KING   | 
|  7902 | FORD   | 
+-------+--------+

连接条件：员工的领导编号 = 领导的员工编号
select 
    a.ename as '员工名',b.ename as '领导名'
from 
    emp a
inner join
    emp b
on
   a.mgr = b.empno;
+--------+--------+
| 员工名 | 领导   |
+--------+--------+
| SMITH  | FORD   |
| ALLEN  | BLAKE  |
| WARD   | BLAKE  |
| JONES  | KING   |
| MARTIN | BLAKE  |
| BLAKE  | KING   |
| CLARK  | KING   |
| SCOTT  | JONES  |
| TURNER | BLAKE  |
| ADAMS  | SCOTT  |
| JAMES  | BLAKE  |
| FORD   | JONES  |
| MILLER | CLARK  |
+--------+--------+

(8) 外连接
  
什么是外连接，和内连接有什么区别？
    内连接：
         假设A和B表进行连接，使用内连接的话，凡是A表和B表能够匹配上的记录查询出来，这就是内连接
	 AB两张表没有主副之分，两张表示平等的。
    外连接：
         假设A和B表进行连接，使用外连接的话，AB两张表中有一张表是主表，一张表是副表，主要查询主表中
	 的数据，捎带着查询副表，当副表中的数据没有和主表中的数据匹配上，副表自动模拟处NULL与之匹配。

    外连接的分类：
         左外连接(左连接) ：表示左边的这张表是主表
	 右外连接(有连接) ：表示右边的这张表示主表
     左连接有右连接的写法，右连接也有左连接的写法。

案例：找出每个员工的上级领导(所有员工必须全部查询出来)

emp a 员工表
mysql> select empno,ename,mgr from emp;
+-------+--------+------+
| empno | ename  | mgr  |
+-------+--------+------+
|  7369 | SMITH  | 7902 |
|  7499 | ALLEN  | 7698 |
|  7521 | WARD   | 7698 |
|  7566 | JONES  | 7839 |
|  7654 | MARTIN | 7698 |
|  7698 | BLAKE  | 7839 |
|  7782 | CLARK  | 7839 |
|  7788 | SCOTT  | 7566 |
|  7839 | KING   | NULL |
|  7844 | TURNER | 7698 |
|  7876 | ADAMS  | 7788 |
|  7900 | JAMES  | 7698 |
|  7902 | FORD   | 7566 |
|  7934 | MILLER | 7782 |
+-------+--------+------+

emp b 领导表
mysql> select empno,ename,mgr from emp;
+-------+--------+
| empno | ename  | 
+-------+--------+
|  7566 | JONES  | 
|  7698 | BLAKE  | 
|  7782 | CLARK  |
|  7788 | SCOTT  | 
|  7839 | KING   | 
|  7902 | FORD   | 
+-------+--------+

左外连接
select 
    a.ename as '员工名',b.ename as '领导名'
from 
    emp a
left join
    emp b
on
   a.mgr = b.empno;

+--------+--------+
| 员工名 | 领导名 |
+--------+--------+
| SMITH  | FORD   |
| ALLEN  | BLAKE  |
| WARD   | BLAKE  |
| JONES  | KING   |
| MARTIN | BLAKE  |
| BLAKE  | KING   |
| CLARK  | KING   |
| SCOTT  | JONES  |
| KING   | NULL   |
| TURNER | BLAKE  |
| ADAMS  | SCOTT  |
| JAMES  | BLAKE  |
| FORD   | JONES  |
| MILLER | CLARK  |
+--------+--------+

案例：找出哪个部门没有员工。
select 
    d.*
from 
    emp e
right join
    dept d
on 
    e.deptno = d.deptno
where
    e.empno is null;

+--------+------------+--------+
| DEPTNO | DNAME      | LOC    |
+--------+------------+--------+
|     40 | OPERATIONS | BOSTON |
+--------+------------+--------+

(9) 三张表怎么连接查询

案例：找出每一个员工的部门名称以及工资等级

EMP e
+-------+--------+--------+---------+
| empno | ename  | deptno | sal     |
+-------+--------+--------+---------+
|  7369 | SMITH  |     20 |  800.00 |
|  7499 | ALLEN  |     30 | 1600.00 |
|  7521 | WARD   |     30 | 1250.00 |
|  7566 | JONES  |     20 | 2975.00 |
|  7654 | MARTIN |     30 | 1250.00 |
|  7698 | BLAKE  |     30 | 2850.00 |
|  7782 | CLARK  |     10 | 2450.00 |
|  7788 | SCOTT  |     20 | 3000.00 |
|  7839 | KING   |     10 | 5000.00 |
|  7844 | TURNER |     30 | 1500.00 |
|  7876 | ADAMS  |     20 | 1100.00 |
|  7900 | JAMES  |     30 |  950.00 |
|  7902 | FORD   |     20 | 3000.00 |
|  7934 | MILLER |     10 | 1300.00 |
+-------+--------+--------+---------+
DEPT d
+--------+------------+----------+
| DEPTNO | DNAME      | LOC      |
+--------+------------+----------+
|     10 | ACCOUNTING | NEW YORK |
|     20 | RESEARCH   | DALLAS   |
|     30 | SALES      | CHICAGO  |
|     40 | OPERATIONS | BOSTON   |
+--------+------------+----------+

SALGRADE s
+-------+-------+-------+
| GRADE | LOSAL | HISAL |
+-------+-------+-------+
|     1 |   700 |  1200 |
|     2 |  1201 |  1400 |
|     3 |  1401 |  2000 |
|     4 |  2001 |  3000 |
|     5 |  3001 |  9999 |
+-------+-------+-------+

select
    e.ename,d.dname,s.grade
from
    emp e
join
    dept d
on 
    e.deptno = d.deptno
join
    salgrade s
on 
    e.sal between s.losal and s.hisal;

+--------+------------+-------+
| ename  | dname      | grade |
+--------+------------+-------+
| SMITH  | RESEARCH   |     1 |
| ALLEN  | SALES      |     3 |
| WARD   | SALES      |     2 |
| JONES  | RESEARCH   |     4 |
| MARTIN | SALES      |     2 |
| BLAKE  | SALES      |     4 |
| CLARK  | ACCOUNTING |     4 |
| SCOTT  | RESEARCH   |     4 |
| KING   | ACCOUNTING |     5 |
| TURNER | SALES      |     3 |
| ADAMS  | RESEARCH   |     1 |
| JAMES  | SALES      |     1 |
| FORD   | RESEARCH   |     4 |
| MILLER | ACCOUNTING |     2 |
+--------+------------+-------+

案例升级：找出每一个员工的部门名称、工资等级以及上级领导
select
    e.ename '员工',d.dname,s.grade,e1.ename '领导'
from
    emp e
join
    dept d
on 
    e.deptno = d.deptno
join
    salgrade s
on 
    e.sal between s.losal and s.hisal
left join
    emp e1
on
    e.mgr = e1.empno;

+--------+------------+-------+-------+
| 员工      | dname   | grade | 领导  |
+--------+------------+-------+-------+
| SMITH  | RESEARCH   |     1 | FORD  |
| ALLEN  | SALES      |     3 | BLAKE |
| WARD   | SALES      |     2 | BLAKE |
| JONES  | RESEARCH   |     4 | KING  |
| MARTIN | SALES      |     2 | BLAKE |
| BLAKE  | SALES      |     4 | KING  |
| CLARK  | ACCOUNTING |     4 | KING  |
| SCOTT  | RESEARCH   |     4 | JONES |
| KING   | ACCOUNTING |     5 | NULL  |
| TURNER | SALES      |     3 | BLAKE |
| ADAMS  | RESEARCH   |     1 | SCOTT |
| JAMES  | SALES      |     1 | BLAKE |
| FORD   | RESEARCH   |     4 | JONES |
| MILLER | ACCOUNTING |     2 | CLARK |
+--------+------------+-------+-------+


3、子查询

(1) 什么是子查询？子查询都可以出现在哪里？
    select语句当中嵌套select语句，被嵌套的select语句是子查询
    子查询可以出现在哪里？
    select
       ...(select)
    from
       ...(select)
    where 
       ...(select)

(2) where子句中使用子查询
案例：找出高于平均薪资的员工信息
select * fron emp where sal > (select avg(sal) from emp);

(3)from后面嵌套子查询
案例：找出每个部门平均薪水的薪资等级
第一步：找出每个部门平均薪水(按照部门编号分组，求sal的平均值)
select deptno,avg(sal) as avgsal from emp group by deptno;
+--------+-------------+
| deptno | avgsal      |
+--------+-------------+
|     10 | 2916.666667 |
|     20 | 2175.000000 |
|     30 | 1566.666667 |
+--------+-------------+
第二步：将以上的查询结果当做临时表t，让t表和salgrade s表连接，条件是：t.avgsal between s.losal and s.hisal
select 
    t.*,s.grade
from 
   (select deptno,avg(sal) as avgsal from emp group by deptno) t
join
   salgrade s
on
  t.avgsal between s.losal and s.hisal;
+--------+-------------+-------+
| deptno | avgsal      | grade |
+--------+-------------+-------+
|     30 | 1566.666667 |     3 |
|     10 | 2916.666667 |     4 |
|     20 | 2175.000000 |     4 |
+--------+-------------+-------+

案例:找出每个部门平均的薪水等级
第一步：找出每个员工的薪水等级
select e.ename,e.sal,e.deptno,s.grade from emp e join salgrade s on e.sal between s.losal and s.hisal;
+--------+---------+--------+-------+
| ename  | sal     | deptno | grade |
+--------+---------+--------+-------+
| SMITH  |  800.00 |     20 |     1 |
| ALLEN  | 1600.00 |     30 |     3 |
| WARD   | 1250.00 |     30 |     2 |
| JONES  | 2975.00 |     20 |     4 |
| MARTIN | 1250.00 |     30 |     2 |
| BLAKE  | 2850.00 |     30 |     4 |
| CLARK  | 2450.00 |     10 |     4 |
| SCOTT  | 3000.00 |     20 |     4 |
| KING   | 5000.00 |     10 |     5 |
| TURNER | 1500.00 |     30 |     3 |
| ADAMS  | 1100.00 |     20 |     1 |
| JAMES  |  950.00 |     30 |     1 |
| FORD   | 3000.00 |     20 |     4 |
| MILLER | 1300.00 |     10 |     2 |
+--------+---------+--------+-------+
第二步：基于以上结果，继续按照deptno分组，求grade平均值
select
   e.deptno,avg(s.grade)
from
   emp e
join
   salgrade s
on
   e.sal between s.losal and s.hisal
group by
   e.deptno;
+--------+--------------+
| deptno | avg(s.grade) |
+--------+--------------+
|     10 |       3.6667 |
|     20 |       2.8000 |
|     30 |       2.5000 |
+--------+--------------+

(4) 在select后面嵌套子查询
案例：找出每个员工所在的部门名称，要求显示员工名和部门名
select e.ename,(select d.dname from dept d where e.deptno = d.deptno) as dname from emp e;
+--------+------------+
| ename  | dname      |
+--------+------------+
| SMITH  | RESEARCH   |
| ALLEN  | SALES      |
| WARD   | SALES      |
| JONES  | RESEARCH   |
| MARTIN | SALES      |
| BLAKE  | SALES      |
| CLARK  | ACCOUNTING |
| SCOTT  | RESEARCH   |
| KING   | ACCOUNTING |
| TURNER | SALES      |
| ADAMS  | RESEARCH   |
| JAMES  | SALES      |
| FORD   | RESEARCH   |
| MILLER | ACCOUNTING |
+--------+------------+

4、union(可以将查询结果集相加)
案例：找出工作岗位是SALESMAN和MANAGER的员工
第一种：select ename,job from emp where job = 'MANAGER' or job = 'SALESMAN';
第二种：select ename,job from emp where job in('MANAGER','SALESMAN');
第三种：select ename,job from emp where job = 'MANAGER'
        union
	select ename,job from emp where job = 'SALESMAN';
+--------+----------+
| ename  | job      |
+--------+----------+
| JONES  | MANAGER  |
| BLAKE  | MANAGER  |
| CLARK  | MANAGER  |
| ALLEN  | SALESMAN |
| WARD   | SALESMAN |
| MARTIN | SALESMAN |
| TURNER | SALESMAN |
+--------+----------+

5、limit(重点中的重点，以后分页查询全靠它)

(1) limit是mysql特有的，其他数据没有，不通用。(Oracle中有一个相同的机制，叫做rownum)
(2) limit去结果集中的部分数据，这是它的作用
(3) 语法机制：
    limit startIndex,length
        startIndex表示起始位置
	length表示取几个
案例：取出工资前5名的员工
   select ename,sal from emp order by sal desc limit 0,5;
   select ename,sal from emp order by sal desc limit 5; // 默认从开始
+-------+---------+
| ename | sal     |
+-------+---------+
| KING  | 5000.00 |
| SCOTT | 3000.00 |
| FORD  | 3000.00 |
| JONES | 2975.00 |
| BLAKE | 2850.00 |
+-------+---------+
(4) limit是SQL语句最后执行的一个环节
select      5
   ..
from        1
   ..
where       2
   ..
group by    3
   ..
having      4
   ..
order by    6
   ..
limit       7
   ..;

(5) 案例：找出工资排名在第4到第9名的员工
   select ename,sal from emp order by sal desc limit 3,6;
  
(6) 通用的标准分页sql

假设每页显示3条记录：
第1页： 0,3
第2页： 3,3
第3页： 6,3
第4页： 9,3

每页显示pageSize条记录：
第pageNo页：(pageNo -1)*pageSize,pageSize

pageSize : 每页显示多少条记录
pageNo ：显示第几页

6、创建表：

   建表语句的语法格式：
      create table 表名(
           字段名1 数据类型,
	   字段名2数据类型,
	   字段名3 数据类型,
	   ....
      );
   关于MySQL当中字段的数据类型？以下只说常见的
     int         整数型(java中的int)
     bigint      长整型(java中的long)
     float       浮点型(java中的float double)
     char        定长字符串(java中的String)
     varchar     可变长字符串(java中的StringBuffer/StringBuilder)
     date        日期类型(java中的java.sql.Date类型)
     BLOB        二进制大对象(存储图片、视屏等流媒体信息) (java中的Object)
     CLOB        字符大对象(存储较大文本，比如，可以存储4G的字符串) (java中的Object) 
     ....
  char和varchar怎么选择？
      在实际的开发中，当某个字段中的数据长度不发生改变的时候，是定长的，例如：生日、性别都是采用char
      当一个字段的数据不是定长的时候，选择采用varchar
  
  表名在数据库中一般建议以：t_或者tbl_开始

案例：创建学生表
      学生信息包括：
         学号、姓名、性别、班级编号、生日
	 学号：bigint
	 姓名：varchar
	 性别：char
	 班级编号：int
	 生日：char
    create table t_student(
	  no bigint,
	  name varchar(225),
	  sex char(1),
	  classno varchar(225),
	  birth char(10)
    );

7、insert语句插入数据
   语法格式：
     insert into 表名(字段名1，字段名2，字段名3...) values(值1，值2，值3...);
     要求：字段的数量和值的数量相同，并且数据类型要对应相同

  insert into t_student(no,name,sex,classno,birth) values(1,'zhangsan','1','gaosan1ban','1950-10-12');
  mysql> select * from t_student;
+------+----------+------+------------+------------+
| no   | name     | sex  | classno    | birth      |
+------+----------+------+------------+------------+
|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |
+------+----------+------+------------+------------+

 insert into t_student(name) values('wangeu');  // 除name字段外，剩下的所有字段自动插入null
 mysql>  select * from t_student;
+------+----------+------+------------+------------+
| no   | name     | sex  | classno    | birth      |
+------+----------+------+------------+------------+
|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |
| NULL | wangeu   | NULL | NULL       | NULL       |
+------+----------+------+------------+------------+

drop table if exists t_student;  // 当这个表存在的话删除
create table t_student(
	  no bigint,
	  name varchar(225),
	  sex char(1) default 1,  // 默认1
	  classno varchar(225),
	  birth char(10)
    );

注意：当一条insert语句执行成功之后，表格当中必然会多一行记录，
      即使多的这一条记录当中某些字段是NULL，后期也没有办法在执行
      insert语句插入数据了，只能使用update进行更新。

// 一次插入多行数据
insert into t_student(no,name,sex,classno,birth) 
      values
      (3,'laotie','1','gaosan1ban','1923-10-12'),
      (2,'lisi','1','gaosan2ban','1955-10-12');

(8) 表的复制
    语法：
        create table 表名 as select语句; // 将查询结果当做表创建出来
	create table dept1 as select * from dept;

(9) 将查询结果插入到一张表中？
    insert into 表名 select ...

(10) 修改数据：update
    语法格式：
        update 表名 set 字段名1=值1，字段名2=值2...where 条件;
   注意：没有条件整张表数据全部更新。

   案例：将部门10的LOC修改为SHANGHAI,将部门名称修改为RENSHIBU
   update dept1 set loc = 'SHANGHAI'，dname = 'RENSHIBU' where deptno = 10;

(11) 删除数据
    语法格式：
       delete from 表名 where 条件;
    注意：没有条件全部删除
   
   删除所有记录：delete from dept1;

   怎么删除大表？(重点)
     turncate table emp1; // 表被截断，不可回滚。永久丢失

12 对表结构的修改，用工具即可完成。
   增删改查有一个术语：CRUD操作
   Create(增)  Retrieve(检索)  Update(修改)  Delete(删除)

13、约束(ConStraint)

(1) 什么是约束？常见的约束有哪些呢？
    在创建表的时候，可以给表的字段添加相应的约束，添加约束的目的是为了保证表中的数据的
    合法性、有效性、完整性
    常见的约束有哪些？
         非空的约束(not null)
	 唯一约束(unique)
	 主键约束(primary key)
	 外键约束(foreigh key)
	 检查约束(check):注意Oracle数据库有check约束，但是mysql没有，目前mysql不支持。

(2) 非空约束 not null
    drop table if exists t_user;
    create table t_user(
	id int,
	username varchar(255) not null,
	password varchar(255)
    );
    insert into t_user(id,username,password) values(1,'lisi','123');

(3) 唯一性约束(unique)
    
    唯一性约束修饰的字段具有唯一性，不能重复。但可以为NULL

案例：给某一列添加unique
    drop table if exists t_user;
    create table t_user(
	id int,
	username varchar(255) unique     【列级约束】
    );
    insert into t_user values(1,'zhangsan');
    insert into t_user values(2,'zhangsan');
ERROR 1062 (23000): Duplicate entry 'zhangsan' for key 'username' // 报错

案例：给两个列或多个列添加unique
     drop table if exists t_user;
    create table t_user(
	id int,
	usercode varchar(255),
	username varchar(255) unique,
	unique(usercode,username) // 多个字段联合添加约束  【表级约束】
    );

(4) 主键约束
    * 怎么给一张表添加主键约束呢？
      drop table if exists t_user;
      create table t_user(
	id int primary key,
	username varchar(255), 
	email varchar(255)
      );
      insert into t_user(id,username,email) values(1,'zs','zs@163.com');
      insert into t_user(id,username,email) values(2,'ls','ls@163.com');
      insert into t_user(id,username,email) values(3,'ww','ww@163.com');
      mysql> select * from t_user;
      +----+----------+------------+
      | id | username | email      |
      +----+----------+------------+
      |  1 | zs       | zs@163.com |
      |  2 | ls       | ls@163.com |
      |  3 | ww       | ww@163.com |
      +----+----------+------------+
 注意：添加了主键约束，主键中的字段不能为NULL，也不能重复
       一张表的主键约束只能有一个
    
    * 主键相关的术语
      主键约束：primary key
      主键字段：id字段后面添加了primary key之后，id叫做主键字段
      主键值：id字段中的每一个值都是主键值
   
   * 主键的作用：一行记录的唯一标识

   * 主键的分类：
     根据主键字段的字段数量来划分
        单一主键(推荐的、常用的)
	复合主键(多个字段联合起来添加一个主键约束) (符合主键不建议使用，因为复合主键违背三范式)
     根据主键性质来划分：
        自然主键:主键值最好是一个和业务没有任何关系的自然数  (推荐使用)
	业务主键：主键值和业务挂钩 (不推荐使用)

          **** 一张表的主键约束只能有一个 ****
   
   * 使用表级约束方式定义主键
     drop table if exists t_user;
     create table t_user(
	id int,
	username varchar(255),
	primary key(id)
     );
     insert into t_user(id,username) values(1,'zs');
     insert into t_user(id,username) values(2,'ls');
     insert into t_user(id,username) values(3,'ww');
     insert into t_user(id,username) values(4,'cs');
     select * from t_user;

   * mysql提供主键值自增：
     drop table if exists t_user;
     create table t_user(
	id int primary key auto_increment,  // id字段自动维护一个自增的数字，从1开始，以1递增

	username varchar(255)
     );
     insert into t_user(username) values('a');
     insert into t_user(username) values('b');
     insert into t_user(username) values('c');
     insert into t_user(username) values('d');
     insert into t_user(username) values('e');
     insert into t_user(username) values('f');
     select * from t_user;
     +----+----------+
     | id | username |
     +----+----------+
     |  1 | a        |
     |  2 | b        |
     |  3 | c        |
     |  4 | d        |
     |  5 | e        |
     |  6 | f        |
     +----+----------+

     提示：Oracle当中也提供了一个自增机制，叫做：序列(sequence) 对象。

(5) 外键约束
    
    * 关于外键约束的相关术语：
      外键约束：foreign key
      外键字段：添加有外键约束的字段
      外键值：外键字段中的每一个值

父表与子表：
    删除数据的时候，先删除子表，再删除父表
    添加数据的时候，先添加父表，再添加子表
    创建表的时候，先创建父表，再创建子表
    删除表的时候，线删除子表，再删除父表
 
案例：设计数据库表，用来维护学生和班级的信息
   
    drop table if exists t_student;
    drop table if exists t_class; 

    create table t_class(
	cno int,
	cname varchar(255),
	primary key(cno)
    );
    
    create table t_student(
	sno int,
	sname varchar(255),
	classno int,
	primary key(sno),
	foreign key(classno) references t_class(cno)
    );

    insert into t_class values(101,'XXXXXXXXXXXXXXXXXX');
    insert into t_class values(102,'YYYYYYYYYYYYYYYYYY');

    insert into t_student values(1,'zs1',101);
    insert into t_student values(2,'zs2',101);
    insert into t_student values(3,'zs3',102);
    insert into t_student values(4,'zs4',102);
    insert into t_student values(5,'zs5',102);
    insert into t_student values(6,'zs6',102);
    select * from t_class;
    select * from t_student;
  
 * 外键可以为NULL吗？  可以
 
 * 外键字段引用其他表的某个字段的时候，被引用的字段必须是主键吗？
   注意：被引用的字段不一定是主键，但至少具有unique约束



 1、事务(Transaction)
    
    * 什么是事务？
      一个事务是一个完整的业务逻辑单元，不可再分
    
    * 和事务相关的语句只有：DML语句 (insert delete update)
      这个三个语句都是和数据库表中的"数据"相关的
      事务的存在是为了保证数据的完整性、安全性

    * 事务的特性：ACID
      A：原子性
      C：一致性
      I：隔离性
      D：持久性 
    
    * 关于事务之间的隔离性
      事务隔离性存在隔离级别，理论上隔离级别包括4个：

         第一级别：读未提交(read uncommitted)
	    对方事务还没有提交，我们当前事务可以读到对方未提交的数据
	    读未提交存在脏读(Dirty Read)现象：表示读到了脏数据

	 第二级别：读已提交(read committed)
	    对方事务提交之后的数据我们可以读取到
	    这种隔离级别解决了：脏读现象
	    读已提交存在的问题是：不可重读读
	 
	 第三级别：可重复读(repeatable read)
	    这种隔离级别解决了：不可重复读
	    这种隔离级别存在的问题是：读取到的数据是幻像

	 第四级别：序列化读/串行化读
	    解决了所有问题
	    效率低

	 Oracle数据库默认的隔离级别是：读已提交
	 mysql数据库默认的隔离级别是：可重复读

     * 演示事务：
       
       - mysql事务默认情况下是自动提交的
         (什么是自动提交？只要执行任意一条DML语句则提交一次) 
	 怎么关闭提交： start transaction;


3、索引
   
   (1) 什么是索引？有什么用？
       索引就相当于一本书的目录，通过目录可以快速的找到相应的资源
       在数据库方面，查询一张表的时候有两种检索方式
           第一种：全表扫描
	   第二种：根据索引检索(效率很高)
	
        索引为什么可以提高检索效率呢？
	    其实最根本的原理是缩小了扫描的范围
	
	索引虽然可以提高检索效率，但是不能随意的添加索引，因为索引也是数据库中的
	对象，也需要数据库不断的维护，是有维护成本的。比如：表中的数据经常被修改
	这样就不适合添加索引，因为数据一旦修改，索引需要重新排列，进行维护。

	添加索引是给某一个字段，或者说某些字段添加索引

	select ename,sal from emp where ename = 'SMITH';
	当ename字段上没有添加索引的时候，以上SQL语句会进行全表扫描，扫描ename字段中所有的值
	当ename字段上添加索引的时候，以上SQL语句会根据索引扫描，快速定位


   (2) 怎么创建索引对象？怎么删除索引对象
      创建索引对象：
          create index 索引名称 on 表名(字段名);
      删除索引对象：
          drop index 索引名称 on 表名;
       

   (3) 什么时候考虑给字段添加索引？(满足什么条件)
	 * 数据量庞大的   (根据客户的需求，根据线上环境)
	 * 该字段很少的DML操作 (因为字段进行修改操作，索引也需要维护)
	 * 该字段经常出现在where子句中  (经常根据哪个字段查询)

   (4) 注意：主键和具有unique约束的字段自动回添加索引
       根据主键查询效率较高。尽量根据主键检索
    
   (5) 查看SQL语句的执行计划
       mysql> explain select ename,sal from emp where sal = 5000;
+----+-------------+-------+------+---------------+------+---------+------+------+-------------+
| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |
+----+-------------+-------+------+---------------+------+---------+------+------+-------------+
|  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 | Using where |
+----+-------------+-------+------+---------------+------+---------+------+------+-------------+
   
   (6) 索引底层采用的数据结构是：B + Tree

   (7) 索引的实现原理：
       通过B Tree缩小扫描范围，底层索引进行了排序，分区，索引会携带数据在表中的"物理地址"，
       最终通过索引检索到数据之后，获取到关联的物理地址，通过物理地址定位表中的数据，效率是
       最高的。
            select ename from emp where ename = 'SMITH';
	    通过索引转换为：
	    select ename from emp where 物理地址 = 0x3;

   (8) 索引的分类：
       单一索引：给单个字段添加索引
       符合索引：给多个字段联合起来添加1个索引
       主键索引：主键上会自动添加索引
       唯一索引：有unique约束的字段上会自动添加索引
       ...
    
   (9) 索引什么时候失效
       select ename from emp where ename like '%A%';
       模糊查询的时候，第一个通配符使用的是%，这个时候索引是失效的
 
5、视图(view)
   
   (1) 什么是视图？
       站在不同的角度区看到数据。(同一张表的数据，通过不同的角度去看待)
   
   (2) 怎么创建视图？怎么删除视图？
       create view myview as select empno,ename from emp;
       drop view myview;

       注意：只有DQL语句才能以视图对象的方式创建出来
   
   (3) 对视图进行增删改查，会影响到原表的数据。(通过视图影响原表数据的，不是直接操作原表)
       对视图也可以进行CRUD操作
   
   (4) 视图的作用
       视图可以隐藏表的实现细节。


6、DBA命令
   
   (1) 将数据库当中的数据导出
       在Windows的dos命令窗口中执行：
          mysqldump bjpowernode>D:\bjpowernode.sql -uroot -p333;

       在Windows的dos命令窗口中执行：(导出数据库中的指定表)
       mysqldump bjpowernode emp>D:\bjpowernode.sql -uroot -p333;


   (2) 导入数据
       create database bjpowernode;
       use bjpowernode;
       source D:\bjpowernode.sql


7、数据库设计三范式(重点内容，面试经常问)
   
   (1) 什么是设计范式
       设计表的依据。按照这个范式设计的表不会出现数据冗余
    
   (2) 三范式都是哪些？
       第一范式 ：任何一张表有应该有主键，并且每一个字段原子性不可再分

       第二范式 : 建立在第一范式的基础之上，所有非主键字段完全依赖主键，不能产生部分依赖
             多对多？三张表，关系表两个外键

       第三范式 ：建立在第二范式的基础上，所有非主键字段直接依赖主键，不能产生传递依赖
             一对多？两张表，多的表加外键

     提醒：在实际开发中，以满足客户的需求为主，有的时候会拿冗余换执行速度。

   (3) 一对一怎么设计？
       有两种方案：
        * 主键共享
	* 外键唯一






